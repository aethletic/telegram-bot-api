<?php

require "../vendor/autoload.php";

/**
 * Авторизация бота + получаем обновление от Telegram
 * 
 * @var \Telegram\Bot $bot
 */
$bot = bot('1234567890:BOT_TOKEN', require 'config.php')->webhook();

/**
 * Универсальный обработчик Update
 * Последний (трейтий) параметр - сортировка (опционально). 
 * Чем меньше значение сортировки, тем раньше функция будет вызвана.
 * По умолчанию $sort равен 500.
 */
$bot->on('message.text', fn () => say('Это сообщение будет вторым'), 2);
$bot->on('message.text', fn () => say('Это первое сообщение'), 1);

// С проверкой значения
$bot->on(['message.text' => 'Привет'], fn () => say('Приветствую!'));

// Поддерживает регулярные выражения + mathces
$bot->on(['message.text' => '/привет/iu'], fn () => say('Приветствую!'));

// $name - это (.*?)
$bot->on(['message.text' => '/привет (.*?)/iu'], fn ($name) => say("Приветствую {$name}!"));

// "*" означает любой ключ. 
$bot->on('*.text', fn () => say('Текстовое сообщение'));

// Множественный вариант ИЛИ message.text ИЛИ channel_post.text
$bot->on(['message.text', 'channel_post.text'], fn () => say('Текстовое сообщение'));

// Все подобные методы применимы к:
// hear, onMessage, command, onCommand, callback onCallback, onInline 
// И другие методы которые построены на базе метода on()

// Можно совмещать со занчением
$bot->on([
    'message.text' => 'Привет',
    'channel_post.text'
], fn () => say('Текстовое сообщение'));

// Если нужно одновременно один ключ проверить на несколько значений
// То необходимо повторяющиеся элементы взять в отедльный массив
$bot->on([
    ['message.text' => 'Привет'],
    ['message.text' => 'Здравствуй'],
    'channel_post.text'
], fn () => say('Текстовое сообщение'));

// обработка обычного текстового сообщения
$bot->hear('Привет', fn () => say('Приветствую!'));

// Поддерживает регулярные выражения + mathces
$bot->hear(['/привет/iu'], fn () => say('Приветствую!'));
$bot->command('/\/ban (.*?)/', fn ($id) => say("Пользователь {$id} забанен!")); // e.g. message: "/ban 123"

// множественный вариант сообщения (или привет, или здравствуй, или hello)
$bot->hear(['Привет', 'Здравствуй', '/hello/i'], fn () => say('Приветствую!'));

// Текст ответа будет взят из файла локализации, с ключом START.
// Таким образом можно очень легко локализовать бота.
$bot->command('/start', fn () => say(lang('START')));

// Получение токенов (matches) из сообщения (поддерживаем все методы которые работают с помощью метода on())
$bot->hear('Меня зовут {name}, я живу в {city}', fn ($name, $city) => say("Привет, {$name}, хороший город {$city}!"));
$bot->command('/ban {id}', fn ($id) => say("Пользователь {$id} забанен!"));
$bot->callback('BAN_USER_{ID}', fn ($id) => notify("Пользователь {$id} забанен!"));

// Выполняем все события
$bot->run();
